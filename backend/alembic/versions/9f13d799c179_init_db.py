"""Init db

Revision ID: 9f13d799c179
Revises: 
Create Date: 2024-12-11 14:43:42.451435

"""
from typing import Sequence, Union
import json
import csv

from alembic import op
import sqlalchemy as sa
import sqlmodel
from models import Expression, ExpressionGroup


# revision identifiers, used by Alembic.
revision: str = '9f13d799c179'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    expr_group_table = op.create_table('expr_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('main_expr', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    formula_table = op.create_table('formula',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('formula', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_formula_formula'), 'formula', ['formula'], unique=False)
    op.create_index(op.f('ix_formula_name'), 'formula', ['name'], unique=False)
    expr_table = op.create_table('expression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expr', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['expr_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    with open('formula.csv', 'r', encoding='utf-8') as csvfile:
        csv_reader = csv.DictReader(csvfile, delimiter=";")
        formulas = [formula_dict for formula_dict in csv_reader]
    op.bulk_insert(formula_table, formulas)

    with open("expressions.json", "r", encoding="utf-8") as file:
        data = json.load(file)
    exprs = data['expressions']
    op.bulk_insert(expr_table, exprs)

    expr_groups = data['expression_groups']
    session = sqlmodel.Session(bind=op.get_bind())
    for group_ in expr_groups:
        group = ExpressionGroup(main_expr=group_['main_expr'])
        for expr in group_['expressions']:
            expression = Expression(name=expr['name'], expr=expr['expr'], group=group)
            session.add(expression)
    session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('expression')
    op.drop_index(op.f('ix_formula_name'), table_name='formula')
    op.drop_index(op.f('ix_formula_formula'), table_name='formula')
    op.drop_table('formula')
    op.drop_table('expr_group')
    # ### end Alembic commands ###
